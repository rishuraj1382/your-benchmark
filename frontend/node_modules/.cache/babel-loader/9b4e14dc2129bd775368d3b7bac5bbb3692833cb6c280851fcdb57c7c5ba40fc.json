{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishu\\\\your-benchmark\\\\frontend\\\\src\\\\components\\\\SequenceMemory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography, TextField, LinearProgress, Container, Grid } from '@mui/material';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles } from './Theme';\nimport statsimg from \"../assets/voilet.png\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InfoSection = styled('div')(infoSectionStyles);\nconst InfoBox = styled('div')(infoBoxStyles);\nconst GameButton = styled(Button)(gameButtonStyles);\n_c = GameButton;\nconst LetterDisplay = styled(Typography)(({\n  theme\n}) => ({\n  fontWeight: 'bold',\n  color: theme.palette.primary.main,\n  marginBottom: theme.spacing(3),\n  userSelect: 'none'\n}));\n_c2 = LetterDisplay;\nconst LevelDisplay = styled(Typography)(({\n  theme\n}) => ({\n  fontWeight: 'bold',\n  color: theme.palette.secondary.main,\n  marginTop: theme.spacing(2)\n}));\n_c3 = LevelDisplay;\nconst SequenceMemory = () => {\n  _s();\n  const [level, setLevel] = useState(1);\n  const [sequence, setSequence] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [showSequence, setShowSequence] = useState(false);\n  const [testOver, setTestOver] = useState(false);\n  const [testStarted, setTestStarted] = useState(false);\n  const [progress, setProgress] = useState(100);\n  const [userId, setUserId] = useState('');\n  const [testResults, setTestResults] = useState([]);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (!storedUser) {\n          return;\n        }\n        const parsedUser = JSON.parse(storedUser);\n        const userId = parsedUser._id;\n        if (!userId) {\n          return;\n        }\n        setUserId(userId);\n        const response = await axios.get(`https://yourbenchmark.onrender.com/users/${userId}`);\n        setTestResults(response.data.testResults);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const saveTestResults = async () => {\n    try {\n      // 1. ALWAYS get the latest user data from the server first\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\n      const currentTestResults = response.data.testResults || {};\n\n      // 2. Your existing logic for calculating the new score (this part is correct)\n      const sequenceMemoryData = currentTestResults.sequenceMemory || {\n        noOfTests: 0,\n        total: 0,\n        min: Infinity,\n        max: 0,\n        avg: 0\n      };\n      const score = level - 1;\n      const newNoOfTests = sequenceMemoryData.noOfTests + 1;\n      const newTotal = sequenceMemoryData.total + score;\n      const newMin = Math.min(sequenceMemoryData.min, score);\n      const newMax = Math.max(sequenceMemoryData.max, score);\n      const newAvg = newTotal / newNoOfTests;\n      currentTestResults.sequenceMemory = {\n        noOfTests: newNoOfTests,\n        total: newTotal,\n        min: newMin,\n        max: newMax,\n        avg: newAvg\n      };\n\n      // 3. Send the complete, up-to-date object back to the server\n      const updatedUserResponse = await axios.patch(`http://localhost:5000/users/${userId}`, {\n        testResults: currentTestResults\n      });\n\n      // 4. (Optional but recommended) Update localStorage with the fresh user data\n      localStorage.setItem('user', JSON.stringify(updatedUserResponse.data));\n      console.log('Test results saved successfully');\n    } catch (error) {\n      console.error('Error saving test results:', error);\n    }\n  };\n  const generateRandomLetter = () => {\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789';\n    return letters.charAt(Math.floor(Math.random() * letters.length));\n  };\n  const startTest = currentLevel => {\n    setTestStarted(true);\n    const newSequence = [...sequence, generateRandomLetter()];\n    setSequence(newSequence);\n    setShowSequence(true);\n    const duration = 1500;\n    setProgress(100);\n    setTimeout(() => {\n      setShowSequence(false);\n    }, duration);\n\n    // Progress bar logic\n    let progressInterval = setInterval(() => {\n      setProgress(prev => {\n        if (prev <= 0) {\n          clearInterval(progressInterval);\n          return 0;\n        }\n        return prev - 100 / (duration / 100);\n      });\n    }, 100);\n  };\n  const handleSubmit = () => {\n    if (userInput.toUpperCase() === sequence.join('')) {\n      const nextLevel = level + 1;\n      setLevel(nextLevel);\n      setUserInput('');\n      startTest(nextLevel);\n    } else {\n      saveTestResults();\n      setTestOver(true);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !showSequence && testStarted && !testOver) {\n      handleSubmit();\n    }\n  };\n  const restartTest = () => {\n    setLevel(1);\n    setSequence([]);\n    setTestOver(false);\n    setUserInput('');\n    setTestStarted(false); // Reset to initial start screen\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [testStarted, showSequence, userInput, sequence]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        bgcolor: 'background.default',\n        minHeight: '100vh',\n        py: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: 'center',\n            py: 4\n          },\n          children: [!testOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h3\",\n              gutterBottom: true,\n              fontWeight: \"bold\",\n              color: \"primary\",\n              children: \"Sequence Memory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LevelDisplay, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: [\"Level \", level]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), showSequence ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(LetterDisplay, {\n                variant: \"h3\",\n                gutterBottom: true,\n                children: sequence[sequence.length - 1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: progress,\n                sx: {\n                  width: '80%',\n                  margin: '20px auto',\n                  height: 10\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: testStarted && /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"column\",\n                spacing: 2,\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h5\",\n                    gutterBottom: true,\n                    children: \"What was the sequence?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    value: userInput,\n                    onChange: e => setUserInput(e.target.value),\n                    variant: \"outlined\",\n                    placeholder: \"Enter the sequence\",\n                    inputProps: {\n                      style: {\n                        textAlign: 'center',\n                        fontSize: '24px'\n                      },\n                      autoFocus: true\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(GameButton, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    onClick: handleSubmit,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 23\n              }, this)\n            }, void 0, false)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              gutterBottom: true,\n              fontWeight: \"bold\",\n              color: \"primary\",\n              children: \"Test Over!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              children: [\"You reached Level \", level - 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: restartTest,\n              sx: {\n                mt: 2\n              },\n              children: \"Restart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), !testStarted && /*#__PURE__*/_jsxDEV(GameButton, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => startTest(level),\n            size: \"large\",\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(SequenceMemory, \"Vs06znNHcQz1v2WKzsJxdb9PT+8=\");\n_c4 = SequenceMemory;\nexport default SequenceMemory;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GameButton\");\n$RefreshReg$(_c2, \"LetterDisplay\");\n$RefreshReg$(_c3, \"LevelDisplay\");\n$RefreshReg$(_c4, \"SequenceMemory\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Typography","TextField","LinearProgress","Container","Grid","styled","ThemeProvider","theme","infoSectionStyles","infoBoxStyles","gameButtonStyles","statsimg","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","InfoSection","InfoBox","GameButton","_c","LetterDisplay","fontWeight","color","palette","primary","main","marginBottom","spacing","userSelect","_c2","LevelDisplay","secondary","marginTop","_c3","SequenceMemory","_s","level","setLevel","sequence","setSequence","userInput","setUserInput","showSequence","setShowSequence","testOver","setTestOver","testStarted","setTestStarted","progress","setProgress","userId","setUserId","testResults","setTestResults","fetchUserData","storedUser","localStorage","getItem","parsedUser","JSON","parse","_id","response","get","data","error","console","saveTestResults","currentTestResults","sequenceMemoryData","sequenceMemory","noOfTests","total","min","Infinity","max","avg","score","newNoOfTests","newTotal","newMin","Math","newMax","newAvg","updatedUserResponse","patch","setItem","stringify","log","generateRandomLetter","letters","charAt","floor","random","length","startTest","currentLevel","newSequence","duration","setTimeout","progressInterval","setInterval","prev","clearInterval","handleSubmit","toUpperCase","join","nextLevel","handleKeyPress","e","key","restartTest","window","addEventListener","removeEventListener","children","sx","bgcolor","minHeight","py","maxWidth","textAlign","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","value","width","margin","height","container","direction","alignItems","item","onChange","target","placeholder","inputProps","style","fontSize","autoFocus","onClick","mt","size","_c4","$RefreshReg$"],"sources":["C:/Users/rishu/your-benchmark/frontend/src/components/SequenceMemory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Button, Typography, TextField, LinearProgress, Container, Grid } from '@mui/material';\r\nimport { styled, ThemeProvider } from '@mui/material/styles';\r\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles } from './Theme';\r\nimport statsimg from \"../assets/voilet.png\";\r\nimport axios from 'axios';\r\n\r\nconst InfoSection = styled('div')(infoSectionStyles);\r\nconst InfoBox = styled('div')(infoBoxStyles);\r\nconst GameButton = styled(Button)(gameButtonStyles);\r\n\r\nconst LetterDisplay = styled(Typography)(({ theme }) => ({\r\n  fontWeight: 'bold',\r\n  color: theme.palette.primary.main,\r\n  marginBottom: theme.spacing(3),\r\n  userSelect: 'none',\r\n}));\r\n\r\nconst LevelDisplay = styled(Typography)(({ theme }) => ({\r\n  fontWeight: 'bold',\r\n  color: theme.palette.secondary.main,\r\n  marginTop: theme.spacing(2),\r\n}));\r\n\r\nconst SequenceMemory = () => {\r\n  const [level, setLevel] = useState(1);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showSequence, setShowSequence] = useState(false);\r\n  const [testOver, setTestOver] = useState(false);\r\n  const [testStarted, setTestStarted] = useState(false);\r\n  const [progress, setProgress] = useState(100);\r\n  const [userId, setUserId] = useState('');\r\n  const [testResults, setTestResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (!storedUser) { return; }\r\n        const parsedUser = JSON.parse(storedUser);\r\n        const userId = parsedUser._id;\r\n        if (!userId) { return; }\r\n        setUserId(userId);\r\n\r\n        const response = await axios.get(`https://yourbenchmark.onrender.com/users/${userId}`);\r\n        setTestResults(response.data.testResults);\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const saveTestResults = async () => {\r\n    try {\r\n      // 1. ALWAYS get the latest user data from the server first\r\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\r\n      const currentTestResults = response.data.testResults || {};\r\n\r\n      // 2. Your existing logic for calculating the new score (this part is correct)\r\n      const sequenceMemoryData = currentTestResults.sequenceMemory || { noOfTests: 0, total: 0, min: Infinity, max: 0, avg: 0 };\r\n      \r\n      const score = level - 1;\r\n      const newNoOfTests = sequenceMemoryData.noOfTests + 1;\r\n      const newTotal = sequenceMemoryData.total + score;\r\n      const newMin = Math.min(sequenceMemoryData.min, score);\r\n      const newMax = Math.max(sequenceMemoryData.max, score);\r\n      const newAvg = newTotal / newNoOfTests;\r\n\r\n      currentTestResults.sequenceMemory = {\r\n        noOfTests: newNoOfTests,\r\n        total: newTotal,\r\n        min: newMin,\r\n        max: newMax,\r\n        avg: newAvg,\r\n      };\r\n\r\n      // 3. Send the complete, up-to-date object back to the server\r\n      const updatedUserResponse = await axios.patch(`http://localhost:5000/users/${userId}`, {\r\n        testResults: currentTestResults,\r\n      });\r\n\r\n      // 4. (Optional but recommended) Update localStorage with the fresh user data\r\n      localStorage.setItem('user', JSON.stringify(updatedUserResponse.data));\r\n\r\n      console.log('Test results saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving test results:', error);\r\n    }\r\n  };\r\n\r\n  const generateRandomLetter = () => {\r\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789';\r\n    return letters.charAt(Math.floor(Math.random() * letters.length));\r\n  };\r\n\r\n  const startTest = (currentLevel) => {\r\n    setTestStarted(true);\r\n    const newSequence = [...sequence, generateRandomLetter()];\r\n    setSequence(newSequence);\r\n    setShowSequence(true);\r\n    \r\n    const duration = 1500;\r\n    setProgress(100);\r\n\r\n    setTimeout(() => {\r\n      setShowSequence(false);\r\n    }, duration);\r\n\r\n    // Progress bar logic\r\n    let progressInterval = setInterval(() => {\r\n        setProgress(prev => {\r\n            if (prev <= 0) {\r\n                clearInterval(progressInterval);\r\n                return 0;\r\n            }\r\n            return prev - (100 / (duration / 100));\r\n        });\r\n    }, 100);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (userInput.toUpperCase() === sequence.join('')) {\r\n      const nextLevel = level + 1;\r\n      setLevel(nextLevel);\r\n      setUserInput('');\r\n      startTest(nextLevel);\r\n    } else {\r\n      saveTestResults();\r\n      setTestOver(true);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !showSequence && testStarted && !testOver) {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const restartTest = () => {\r\n    setLevel(1);\r\n    setSequence([]);\r\n    setTestOver(false);\r\n    setUserInput('');\r\n    setTestStarted(false); // Reset to initial start screen\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  }, [testStarted, showSequence, userInput, sequence]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box sx={{ bgcolor: 'background.default', minHeight: '100vh', py: 4 }}>\r\n        <Container maxWidth=\"sm\">\r\n          <Box sx={{ textAlign: 'center', py: 4 }}>\r\n            {!testOver ? (\r\n              <>\r\n                <Typography variant=\"h3\" gutterBottom fontWeight=\"bold\" color=\"primary\">\r\n                  Sequence Memory\r\n                </Typography>\r\n                <LevelDisplay variant=\"h6\" gutterBottom>\r\n                  Level {level}\r\n                </LevelDisplay>\r\n\r\n                {showSequence ? (\r\n                  <>\r\n                    <LetterDisplay variant=\"h3\" gutterBottom>\r\n                      {sequence[sequence.length - 1]}\r\n                    </LetterDisplay>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={progress}\r\n                      sx={{ width: '80%', margin: '20px auto', height: 10 }}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {testStarted && (\r\n                      <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                        <Grid item>\r\n                          <Typography variant=\"h5\" gutterBottom>\r\n                            What was the sequence?\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                          <TextField\r\n                            value={userInput}\r\n                            onChange={(e) => setUserInput(e.target.value)}\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Enter the sequence\"\r\n                            inputProps={{\r\n                              style: { textAlign: 'center', fontSize: '24px' },\r\n                              autoFocus: true\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item>\r\n                          <GameButton variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                            Submit\r\n                          </GameButton>\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Typography variant=\"h4\" gutterBottom fontWeight=\"bold\" color=\"primary\">\r\n                  Test Over!\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                  You reached Level {level - 1}\r\n                </Typography>\r\n                <GameButton variant=\"contained\" color=\"primary\" onClick={restartTest} sx={{ mt: 2 }}>\r\n                  Restart\r\n                </GameButton>\r\n              </>\r\n            )}\r\n\r\n            {!testStarted && (\r\n              <GameButton variant=\"contained\" color=\"primary\" onClick={() => startTest(level)} size=\"large\">\r\n                Start Game\r\n              </GameButton>\r\n            )}\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default SequenceMemory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}