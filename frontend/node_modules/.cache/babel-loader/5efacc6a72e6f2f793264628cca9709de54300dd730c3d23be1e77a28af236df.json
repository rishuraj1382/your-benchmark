{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishu\\\\your-benchmark\\\\frontend\\\\src\\\\components\\\\VerbalMemory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography, Container, Grid, ThemeProvider } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { Link } from '@mui/material';\nimport statsimg from \"../assets/voilet.png\";\nimport axios from 'axios';\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles, wordDisplayStyles, scoreDisplayStyles } from './Theme';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InfoSection = styled('div')(infoSectionStyles);\n_c = InfoSection;\nconst InfoBox = styled('div')(infoBoxStyles);\n_c2 = InfoBox;\nconst GameButton = styled(Button)(gameButtonStyles);\n_c3 = GameButton;\nconst WordDisplay = styled(Typography)(wordDisplayStyles);\n_c4 = WordDisplay;\nconst ScoreDisplay = styled(Typography)(scoreDisplayStyles);\n_c5 = ScoreDisplay;\nconst VerbalMemory = () => {\n  _s();\n  const [started, setStarted] = useState(false);\n  const [word, setWord] = useState('');\n  const [oldWords, setOldWords] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [userId, setUserId] = useState('');\n  const [testResults, setTestResults] = useState([]);\n  const wordList = ['apple', 'banana', 'grape', 'orange', 'pineapple', 'dog', 'cat', 'mouse', 'elephant', 'giraffe', 'house', 'car', 'tree', 'flower', 'book', 'computer', 'phone', 'table', 'chair', 'window', 'door', 'pencil', 'pen', 'notebook', 'backpack', 'shoe', 'shirt', 'pants', 'hat', 'glasses', 'watch', 'clock', 'lamp', 'picture', 'painting', 'television', 'radio', 'camera', 'guitar', 'piano', 'drum', 'violin', 'flute', 'trumpet', 'saxophone', 'mountain', 'river', 'ocean', 'lake', 'forest', 'desert', 'island', 'beach', 'sun', 'moon', 'star', 'planet', 'galaxy', 'universe', 'cloud', 'rain', 'snow', 'wind', 'thunder', 'lightning', 'rainbow', 'fire', 'water', 'earth', 'air', 'metal', 'wood', 'plastic', 'glass', 'paper', 'cotton', 'silk', 'leather', 'rubber', 'stone', 'diamond', 'gold', 'silver', 'bronze', 'iron', 'steel', 'copper', 'aluminum', 'titanium', 'platinum', 'hydrogen', 'oxygen', 'carbon', 'nitrogen', 'helium', 'neon', 'argon', 'krypton', 'xenon', 'radon'];\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (!storedUser) {\n          return;\n        }\n        const parsedUser = JSON.parse(storedUser);\n        const userId = parsedUser._id;\n        if (!userId) {\n          return;\n        }\n        setUserId(userId);\n        const response = await axios.get(`http://localhost:5000/users/${userId}`);\n        setTestResults(response.data.testResults);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const saveTestResults = async () => {\n    try {\n      // 1. ALWAYS get the latest user data from the server first\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\n      const currentTestResults = response.data.testResults || {};\n\n      // 2. Update ONLY the data for the specific test you just played\n      const score = level - 1; // Or whatever the score is for that game\n      const testData = currentTestResults.verbalMemory || {\n        noOfTests: 0,\n        total: 0,\n        min: Infinity,\n        max: 0,\n        avg: 0\n      };\n      const newNoOfTests = testData.noOfTests + 1;\n      const newTotal = testData.total + score;\n      const newMin = Math.min(testData.min, score);\n      const newMax = Math.max(testData.max, score);\n      const newAvg = newTotal / newNoOfTests;\n\n      // Make sure to use the correct test name here (e.g., 'visualMemory', 'aimTrainer')\n      currentTestResults.vlMemory = {\n        noOfTests: newNoOfTests,\n        total: newTotal,\n        min: newMin,\n        max: newMax,\n        avg: newAvg\n      };\n\n      // 3. Send the complete, up-to-date object back to the server\n      await axios.patch(`http://localhost:5000/users/${userId}`, {\n        testResults: currentTestResults\n      });\n      console.log('Test results saved successfully');\n    } catch (error) {\n      console.error('Error saving test results:', error);\n    }\n  };\n  const generateWord = () => {\n    const repetitionProbability = 0.4;\n    let newWord;\n    if (oldWords.length > 0 && Math.random() < repetitionProbability) {\n      do {\n        const randomIndex = Math.floor(Math.random() * oldWords.length);\n        newWord = oldWords[randomIndex];\n      } while (newWord === word);\n    } else {\n      do {\n        const randomIndex = Math.floor(Math.random() * wordList.length);\n        newWord = wordList[randomIndex];\n      } while (newWord === word);\n    }\n    return newWord;\n  };\n  const startGame = () => {\n    setStarted(true);\n    setGameOver(false);\n    setOldWords([]);\n    setScore(0);\n    setWord(generateWord());\n  };\n  const handleNew = () => {\n    if (oldWords.includes(word)) {\n      endGame();\n    } else {\n      setOldWords([...oldWords, word]);\n      setScore(prevScore => prevScore + 1);\n      setWord(generateWord());\n    }\n  };\n  const handleOld = () => {\n    if (!oldWords.includes(word)) {\n      endGame();\n    } else {\n      setOldWords([...oldWords, word]);\n      setScore(prevScore => prevScore + 1);\n      setWord(generateWord());\n    }\n  };\n  const endGame = () => {\n    setGameOver(true);\n    saveTestResults();\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        bgcolor: 'background.default',\n        minHeight: '100vh',\n        py: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: 'center',\n            py: 4,\n            minHeight: '300px'\n          },\n          children: !started ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h3\",\n              gutterBottom: true,\n              fontWeight: \"bold\",\n              color: \"primary\",\n              children: \"Verbal Memory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              gutterBottom: true,\n              sx: {\n                mb: 3\n              },\n              children: \"You will be shown words, one by one. If you've seen a word before, click SEEN. If it's a new word, click NEW.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: startGame,\n              size: \"large\",\n              children: \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : gameOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h3\",\n              gutterBottom: true,\n              fontWeight: \"bold\",\n              color: \"primary\",\n              children: \"Game Over\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: [\"Your final score: \", score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: startGame,\n              children: \"Play Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            spacing: 2,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(WordDisplay, {\n                variant: \"h2\",\n                children: word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: [/*#__PURE__*/_jsxDEV(GameButton, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleNew,\n                children: \"New\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n                variant: \"contained\",\n                color: \"secondary\",\n                onClick: handleOld,\n                children: \"Seen\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n                variant: \"h6\",\n                children: [\"Score: \", score]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoSection, {\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"About the test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            paragraph: true,\n            children: \"This test measures how many words you can keep in short-term memory at once.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Statistics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: statsimg,\n            alt: \"Statistics\",\n            style: {\n              width: '100%',\n              maxWidth: '400px',\n              margin: '0 auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(VerbalMemory, \"8dUqU16PPkLVuErDxGwZ2oQndr8=\");\n_c6 = VerbalMemory;\nexport default VerbalMemory;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"InfoSection\");\n$RefreshReg$(_c2, \"InfoBox\");\n$RefreshReg$(_c3, \"GameButton\");\n$RefreshReg$(_c4, \"WordDisplay\");\n$RefreshReg$(_c5, \"ScoreDisplay\");\n$RefreshReg$(_c6, \"VerbalMemory\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Typography","Container","Grid","ThemeProvider","styled","Link","statsimg","axios","theme","infoSectionStyles","infoBoxStyles","gameButtonStyles","wordDisplayStyles","scoreDisplayStyles","jsxDEV","_jsxDEV","Fragment","_Fragment","InfoSection","_c","InfoBox","_c2","GameButton","_c3","WordDisplay","_c4","ScoreDisplay","_c5","VerbalMemory","_s","started","setStarted","word","setWord","oldWords","setOldWords","gameOver","setGameOver","score","setScore","userId","setUserId","testResults","setTestResults","wordList","fetchUserData","storedUser","localStorage","getItem","parsedUser","JSON","parse","_id","response","get","data","error","console","saveTestResults","currentTestResults","level","testData","verbalMemory","noOfTests","total","min","Infinity","max","avg","newNoOfTests","newTotal","newMin","Math","newMax","newAvg","vlMemory","patch","log","generateWord","repetitionProbability","newWord","length","random","randomIndex","floor","startGame","handleNew","includes","endGame","prevScore","handleOld","children","sx","bgcolor","minHeight","py","maxWidth","textAlign","variant","gutterBottom","fontWeight","color","fileName","_jsxFileName","lineNumber","columnNumber","mb","onClick","size","container","direction","spacing","alignItems","item","paragraph","src","alt","style","width","margin","_c6","$RefreshReg$"],"sources":["C:/Users/rishu/your-benchmark/frontend/src/components/VerbalMemory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Button, Typography, Container, Grid, ThemeProvider } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport { Link } from '@mui/material';\r\nimport statsimg from \"../assets/voilet.png\";\r\nimport axios from 'axios';\r\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles, wordDisplayStyles, scoreDisplayStyles } from './Theme';\r\n\r\nconst InfoSection = styled('div')(infoSectionStyles);\r\nconst InfoBox = styled('div')(infoBoxStyles);\r\nconst GameButton = styled(Button)(gameButtonStyles);\r\nconst WordDisplay = styled(Typography)(wordDisplayStyles);\r\nconst ScoreDisplay = styled(Typography)(scoreDisplayStyles);\r\n\r\nconst VerbalMemory = () => {\r\n  const [started, setStarted] = useState(false);\r\n  const [word, setWord] = useState('');\r\n  const [oldWords, setOldWords] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [userId, setUserId] = useState('');\r\n  const [testResults, setTestResults] = useState([]);\r\n\r\n  const wordList = [\r\n    'apple', 'banana', 'grape', 'orange', 'pineapple', 'dog', 'cat', 'mouse', 'elephant', 'giraffe',\r\n    'house', 'car', 'tree', 'flower', 'book', 'computer', 'phone', 'table', 'chair', 'window',\r\n    'door', 'pencil', 'pen', 'notebook', 'backpack', 'shoe', 'shirt', 'pants', 'hat', 'glasses',\r\n    'watch', 'clock', 'lamp', 'picture', 'painting', 'television', 'radio', 'camera', 'guitar', 'piano',\r\n    'drum', 'violin', 'flute', 'trumpet', 'saxophone', 'mountain', 'river', 'ocean', 'lake', 'forest',\r\n    'desert', 'island', 'beach', 'sun', 'moon', 'star', 'planet', 'galaxy', 'universe', 'cloud',\r\n    'rain', 'snow', 'wind', 'thunder', 'lightning', 'rainbow', 'fire', 'water', 'earth', 'air',\r\n    'metal', 'wood', 'plastic', 'glass', 'paper', 'cotton', 'silk', 'leather', 'rubber', 'stone',\r\n    'diamond', 'gold', 'silver', 'bronze', 'iron', 'steel', 'copper', 'aluminum', 'titanium', 'platinum',\r\n    'hydrogen', 'oxygen', 'carbon', 'nitrogen', 'helium', 'neon', 'argon', 'krypton', 'xenon', 'radon'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (!storedUser) { return; }\r\n        const parsedUser = JSON.parse(storedUser);\r\n        const userId = parsedUser._id;\r\n        if (!userId) { return; }\r\n        setUserId(userId);\r\n\r\n        const response = await axios.get(`http://localhost:5000/users/${userId}`);\r\n        setTestResults(response.data.testResults);\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const saveTestResults = async () => {\r\n    try {\r\n      // 1. ALWAYS get the latest user data from the server first\r\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\r\n      const currentTestResults = response.data.testResults || {};\r\n\r\n      // 2. Update ONLY the data for the specific test you just played\r\n      const score = level - 1; // Or whatever the score is for that game\r\n      const testData = currentTestResults.verbalMemory || { noOfTests: 0, total: 0, min: Infinity, max: 0, avg: 0 };\r\n      \r\n      const newNoOfTests = testData.noOfTests + 1;\r\n      const newTotal = testData.total + score;\r\n      const newMin = Math.min(testData.min, score);\r\n      const newMax = Math.max(testData.max, score);\r\n      const newAvg = newTotal / newNoOfTests;\r\n\r\n      // Make sure to use the correct test name here (e.g., 'visualMemory', 'aimTrainer')\r\n      currentTestResults.vlMemory = {\r\n        noOfTests: newNoOfTests,\r\n        total: newTotal,\r\n        min: newMin,\r\n        max: newMax,\r\n        avg: newAvg,\r\n      };\r\n      \r\n      // 3. Send the complete, up-to-date object back to the server\r\n      await axios.patch(`http://localhost:5000/users/${userId}`, {\r\n        testResults: currentTestResults,\r\n      });\r\n\r\n      console.log('Test results saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving test results:', error);\r\n    }\r\n  };\r\n  const generateWord = () => {\r\n    const repetitionProbability = 0.4;\r\n    let newWord;\r\n\r\n    if (oldWords.length > 0 && Math.random() < repetitionProbability) {\r\n      do {\r\n        const randomIndex = Math.floor(Math.random() * oldWords.length);\r\n        newWord = oldWords[randomIndex];\r\n      } while (newWord === word);\r\n    } else {\r\n      do {\r\n        const randomIndex = Math.floor(Math.random() * wordList.length);\r\n        newWord = wordList[randomIndex];\r\n      } while (newWord === word);\r\n    }\r\n    return newWord;\r\n  };\r\n\r\n  const startGame = () => {\r\n    setStarted(true);\r\n    setGameOver(false);\r\n    setOldWords([]);\r\n    setScore(0);\r\n    setWord(generateWord());\r\n  };\r\n\r\n  const handleNew = () => {\r\n    if (oldWords.includes(word)) {\r\n      endGame();\r\n    } else {\r\n      setOldWords([...oldWords, word]);\r\n      setScore(prevScore => prevScore + 1);\r\n      setWord(generateWord());\r\n    }\r\n  };\r\n\r\n  const handleOld = () => {\r\n    if (!oldWords.includes(word)) {\r\n      endGame();\r\n    } else {\r\n      setOldWords([...oldWords, word]);\r\n      setScore(prevScore => prevScore + 1);\r\n      setWord(generateWord());\r\n    }\r\n  };\r\n\r\n  const endGame = () => {\r\n    setGameOver(true);\r\n    saveTestResults();\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box sx={{ bgcolor: 'background.default', minHeight: '100vh', py: 4 }}>\r\n        <Container maxWidth=\"sm\">\r\n          <Box sx={{ textAlign: 'center', py: 4, minHeight: '300px' }}>\r\n            {!started ? (\r\n              <>\r\n                <Typography variant=\"h3\" gutterBottom fontWeight=\"bold\" color=\"primary\">\r\n                  Verbal Memory\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom sx={{ mb: 3 }}>\r\n                  You will be shown words, one by one. If you've seen a word before, click SEEN. If it's a new word, click NEW.\r\n                </Typography>\r\n                <GameButton variant=\"contained\" color=\"primary\" onClick={startGame} size=\"large\">\r\n                  Start\r\n                </GameButton>\r\n              </>\r\n            ) : gameOver ? (\r\n              <>\r\n                <Typography variant=\"h3\" gutterBottom fontWeight=\"bold\" color=\"primary\">\r\n                  Game Over\r\n                </Typography>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Your final score: {score}\r\n                </Typography>\r\n                <GameButton variant=\"contained\" color=\"primary\" onClick={startGame}>\r\n                  Play Again\r\n                </GameButton>\r\n              </>\r\n            ) : (\r\n              <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                <Grid item>\r\n                  <WordDisplay variant=\"h2\">{word}</WordDisplay>\r\n                </Grid>\r\n                <Grid item>\r\n                  <GameButton variant=\"contained\" color=\"primary\" onClick={handleNew}>\r\n                    New\r\n                  </GameButton>\r\n                  <GameButton variant=\"contained\" color=\"secondary\" onClick={handleOld}>\r\n                    Seen\r\n                  </GameButton>\r\n                </Grid>\r\n                <Grid item>\r\n                  <ScoreDisplay variant=\"h6\">Score: {score}</ScoreDisplay>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Box>\r\n        </Container>\r\n        <InfoSection>\r\n          <InfoBox>\r\n            <Typography variant=\"h6\" gutterBottom>About the test</Typography>\r\n            <Typography paragraph>\r\n              This test measures how many words you can keep in short-term memory at once.\r\n            </Typography>\r\n          </InfoBox>\r\n          <InfoBox>\r\n            <Typography variant=\"h6\" gutterBottom>Statistics</Typography>\r\n            <img src={statsimg} alt=\"Statistics\" style={{ width: '100%', maxWidth: '400px', margin: '0 auto' }} />\r\n          </InfoBox>\r\n        </InfoSection>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default VerbalMemory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}