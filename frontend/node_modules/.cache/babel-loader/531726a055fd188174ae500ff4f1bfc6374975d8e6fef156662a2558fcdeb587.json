{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishu\\\\your-benchmark\\\\frontend\\\\src\\\\components\\\\SequenceMemory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography, TextField, LinearProgress, Container, Grid } from '@mui/material';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles } from './Theme';\nimport statsimg from \"../assets/voilet.png\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InfoSection = styled('div')(infoSectionStyles);\nconst InfoBox = styled('div')(infoBoxStyles);\nconst GameButton = styled(Button)(gameButtonButtonStyles);\n_c = GameButton;\nconst LetterDisplay = styled(Typography)(({\n  theme\n}) => ({\n  fontWeight: 'bold',\n  color: theme.palette.primary.main,\n  marginBottom: theme.spacing(3),\n  userSelect: 'none'\n}));\n_c2 = LetterDisplay;\nconst LevelDisplay = styled(Typography)(({\n  theme\n}) => ({\n  fontWeight: 'bold',\n  color: theme.palette.secondary.main,\n  marginTop: theme.spacing(2)\n}));\n_c3 = LevelDisplay;\nconst SequenceMemory = () => {\n  _s();\n  const [level, setLevel] = useState(1);\n  const [sequence, setSequence] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [gameState, setGameState] = useState('start'); // 'start', 'showing', 'input', 'over'\n  const [progress, setProgress] = useState(100);\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (!storedUser) return;\n        const parsedUser = JSON.parse(storedUser);\n        const userId = parsedUser._id;\n        if (!userId) return;\n        setUserId(userId);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const saveTestResults = async score => {\n    try {\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\n      const currentTestResults = response.data.testResults || {};\n      const sequenceMemoryData = currentTestResults.sequenceMemory || {\n        noOfTests: 0,\n        total: 0,\n        min: Infinity,\n        max: 0,\n        avg: 0\n      };\n      const newNoOfTests = sequenceMemoryData.noOfTests + 1;\n      const newTotal = sequenceMemoryData.total + score;\n      const newMin = Math.min(sequenceMemoryData.min, score);\n      const newMax = Math.max(sequenceMemoryData.max, score);\n      const newAvg = newTotal / newNoOfTests;\n      currentTestResults.sequenceMemory = {\n        noOfTests: newNoOfTests,\n        total: newTotal,\n        min: newMin,\n        max: newMax,\n        avg: newAvg\n      };\n      const updatedUserResponse = await axios.patch(`http://localhost:5000/users/${userId}`, {\n        testResults: currentTestResults\n      });\n      localStorage.setItem('user', JSON.stringify(updatedUserResponse.data));\n      console.log('Test results saved successfully');\n    } catch (error) {\n      console.error('Error saving test results:', error);\n    }\n  };\n  const generateRandomLetter = () => {\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789';\n    return letters.charAt(Math.floor(Math.random() * letters.length));\n  };\n  const nextTurn = () => {\n    setGameState('showing');\n    // Use functional update to ensure we're using the latest sequence state\n    setSequence(prevSequence => [...prevSequence, generateRandomLetter()]);\n  };\n  useEffect(() => {\n    if (gameState === 'showing') {\n      const duration = 1500;\n      setProgress(100);\n      const hideTimeout = setTimeout(() => {\n        setGameState('input');\n      }, duration);\n      const progressInterval = setInterval(() => {\n        setProgress(prev => prev <= 0 ? 0 : prev - 100 / (duration / 100));\n      }, 100);\n      return () => {\n        clearTimeout(hideTimeout);\n        clearInterval(progressInterval);\n      };\n    }\n  }, [sequence, gameState]); // Effect depends on the sequence changing\n\n  const handleSubmit = () => {\n    // Add console logs for debugging\n    console.log(`Your Input: \"${userInput.toUpperCase()}\"`);\n    console.log(`Correct Sequence: \"${sequence.join('')}\"`);\n    if (userInput.toUpperCase() === sequence.join('')) {\n      setLevel(prevLevel => prevLevel + 1);\n      setUserInput('');\n      nextTurn();\n    } else {\n      const finalScore = level - 1;\n      saveTestResults(finalScore);\n      setGameState('over');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && gameState === 'input') {\n      handleSubmit();\n    }\n  };\n  const startGame = () => {\n    setLevel(1);\n    setSequence([]);\n    setUserInput('');\n    setGameState('start'); // Go to start screen, then first turn\n    // A small timeout to allow state to reset before first turn\n    setTimeout(() => nextTurn(), 100);\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [gameState, userInput, sequence]); // Rerun when these change\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        bgcolor: 'background.default',\n        minHeight: '100vh',\n        py: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: 'center',\n            py: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            gutterBottom: true,\n            fontWeight: \"bold\",\n            color: \"primary\",\n            children: \"Sequence Memory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), gameState === 'start' && /*#__PURE__*/_jsxDEV(GameButton, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: startGame,\n            size: \"large\",\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 18\n          }, this), (gameState === 'showing' || gameState === 'input') && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(LevelDisplay, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: [\"Level \", level]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this), gameState === 'showing' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(LetterDisplay, {\n                variant: \"h3\",\n                gutterBottom: true,\n                children: sequence[sequence.length - 1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: progress,\n                sx: {\n                  width: '80%',\n                  margin: '20px auto',\n                  height: 10\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"column\",\n              spacing: 2,\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  gutterBottom: true,\n                  children: \"What was the sequence?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 32\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  value: userInput,\n                  onChange: e => setUserInput(e.target.value),\n                  variant: \"outlined\",\n                  placeholder: \"Enter the sequence\",\n                  inputProps: {\n                    style: {\n                      textAlign: 'center',\n                      fontSize: '24px'\n                    },\n                    autoFocus: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(GameButton, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: handleSubmit,\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 32\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), gameState === 'over' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              gutterBottom: true,\n              fontWeight: \"bold\",\n              color: \"primary\",\n              children: \"Test Over!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              children: [\"You successfully completed \", level - 1, \" levels.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: startGame,\n              sx: {\n                mt: 2\n              },\n              children: \"Restart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(SequenceMemory, \"dKCk16YwkC0ND5OdTg50XzR32b4=\");\n_c4 = SequenceMemory;\nexport default SequenceMemory;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GameButton\");\n$RefreshReg$(_c2, \"LetterDisplay\");\n$RefreshReg$(_c3, \"LevelDisplay\");\n$RefreshReg$(_c4, \"SequenceMemory\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Typography","TextField","LinearProgress","Container","Grid","styled","ThemeProvider","theme","infoSectionStyles","infoBoxStyles","gameButtonStyles","statsimg","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","InfoSection","InfoBox","GameButton","gameButtonButtonStyles","_c","LetterDisplay","fontWeight","color","palette","primary","main","marginBottom","spacing","userSelect","_c2","LevelDisplay","secondary","marginTop","_c3","SequenceMemory","_s","level","setLevel","sequence","setSequence","userInput","setUserInput","gameState","setGameState","progress","setProgress","userId","setUserId","fetchUserData","storedUser","localStorage","getItem","parsedUser","JSON","parse","_id","error","console","saveTestResults","score","response","get","currentTestResults","data","testResults","sequenceMemoryData","sequenceMemory","noOfTests","total","min","Infinity","max","avg","newNoOfTests","newTotal","newMin","Math","newMax","newAvg","updatedUserResponse","patch","setItem","stringify","log","generateRandomLetter","letters","charAt","floor","random","length","nextTurn","prevSequence","duration","hideTimeout","setTimeout","progressInterval","setInterval","prev","clearTimeout","clearInterval","handleSubmit","toUpperCase","join","prevLevel","finalScore","handleKeyPress","e","key","startGame","window","addEventListener","removeEventListener","children","sx","bgcolor","minHeight","py","maxWidth","textAlign","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","value","width","margin","height","container","direction","alignItems","item","onChange","target","placeholder","inputProps","style","fontSize","autoFocus","mt","_c4","$RefreshReg$"],"sources":["C:/Users/rishu/your-benchmark/frontend/src/components/SequenceMemory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Button, Typography, TextField, LinearProgress, Container, Grid } from '@mui/material';\r\nimport { styled, ThemeProvider } from '@mui/material/styles';\r\nimport { theme, infoSectionStyles, infoBoxStyles, gameButtonStyles } from './Theme';\r\nimport statsimg from \"../assets/voilet.png\";\r\nimport axios from 'axios';\r\n\r\nconst InfoSection = styled('div')(infoSectionStyles);\r\nconst InfoBox = styled('div')(infoBoxStyles);\r\nconst GameButton = styled(Button)(gameButtonButtonStyles);\r\n\r\nconst LetterDisplay = styled(Typography)(({ theme }) => ({\r\n  fontWeight: 'bold',\r\n  color: theme.palette.primary.main,\r\n  marginBottom: theme.spacing(3),\r\n  userSelect: 'none',\r\n}));\r\n\r\nconst LevelDisplay = styled(Typography)(({ theme }) => ({\r\n  fontWeight: 'bold',\r\n  color: theme.palette.secondary.main,\r\n  marginTop: theme.spacing(2),\r\n}));\r\n\r\nconst SequenceMemory = () => {\r\n  const [level, setLevel] = useState(1);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [gameState, setGameState] = useState('start'); // 'start', 'showing', 'input', 'over'\r\n  const [progress, setProgress] = useState(100);\r\n  const [userId, setUserId] = useState('');\r\n  \r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (!storedUser) return;\r\n        const parsedUser = JSON.parse(storedUser);\r\n        const userId = parsedUser._id;\r\n        if (!userId) return;\r\n        setUserId(userId);\r\n      } catch (error) {\r\n        console.error('Error parsing user data:', error);\r\n      }\r\n    };\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const saveTestResults = async (score) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/users/${userId}`);\r\n      const currentTestResults = response.data.testResults || {};\r\n      const sequenceMemoryData = currentTestResults.sequenceMemory || { noOfTests: 0, total: 0, min: Infinity, max: 0, avg: 0 };\r\n      \r\n      const newNoOfTests = sequenceMemoryData.noOfTests + 1;\r\n      const newTotal = sequenceMemoryData.total + score;\r\n      const newMin = Math.min(sequenceMemoryData.min, score);\r\n      const newMax = Math.max(sequenceMemoryData.max, score);\r\n      const newAvg = newTotal / newNoOfTests;\r\n\r\n      currentTestResults.sequenceMemory = { noOfTests: newNoOfTests, total: newTotal, min: newMin, max: newMax, avg: newAvg };\r\n\r\n      const updatedUserResponse = await axios.patch(`http://localhost:5000/users/${userId}`, { testResults: currentTestResults });\r\n      localStorage.setItem('user', JSON.stringify(updatedUserResponse.data));\r\n      console.log('Test results saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving test results:', error);\r\n    }\r\n  };\r\n\r\n  const generateRandomLetter = () => {\r\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789';\r\n    return letters.charAt(Math.floor(Math.random() * letters.length));\r\n  };\r\n  \r\n  const nextTurn = () => {\r\n    setGameState('showing');\r\n    // Use functional update to ensure we're using the latest sequence state\r\n    setSequence(prevSequence => [...prevSequence, generateRandomLetter()]); \r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (gameState === 'showing') {\r\n      const duration = 1500;\r\n      setProgress(100);\r\n      \r\n      const hideTimeout = setTimeout(() => {\r\n        setGameState('input');\r\n      }, duration);\r\n      \r\n      const progressInterval = setInterval(() => {\r\n        setProgress(prev => (prev <= 0 ? 0 : prev - (100 / (duration / 100))));\r\n      }, 100);\r\n      \r\n      return () => {\r\n        clearTimeout(hideTimeout);\r\n        clearInterval(progressInterval);\r\n      };\r\n    }\r\n  }, [sequence, gameState]); // Effect depends on the sequence changing\r\n\r\n  const handleSubmit = () => {\r\n    // Add console logs for debugging\r\n    console.log(`Your Input: \"${userInput.toUpperCase()}\"`);\r\n    console.log(`Correct Sequence: \"${sequence.join('')}\"`);\r\n\r\n    if (userInput.toUpperCase() === sequence.join('')) {\r\n      setLevel(prevLevel => prevLevel + 1);\r\n      setUserInput('');\r\n      nextTurn();\r\n    } else {\r\n      const finalScore = level - 1;\r\n      saveTestResults(finalScore);\r\n      setGameState('over');\r\n    }\r\n  };\r\n  \r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && gameState === 'input') {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    setLevel(1);\r\n    setSequence([]);\r\n    setUserInput('');\r\n    setGameState('start'); // Go to start screen, then first turn\r\n    // A small timeout to allow state to reset before first turn\r\n    setTimeout(() => nextTurn(), 100); \r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyPress);\r\n    };\r\n  }, [gameState, userInput, sequence]); // Rerun when these change\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box sx={{ bgcolor: 'background.default', minHeight: '100vh', py: 4 }}>\r\n        <Container maxWidth=\"sm\">\r\n          <Box sx={{ textAlign: 'center', py: 4 }}>\r\n            <Typography variant=\"h3\" gutterBottom fontWeight=\"bold\" color=\"primary\">Sequence Memory</Typography>\r\n            \r\n            {gameState === 'start' && (\r\n                 <GameButton variant=\"contained\" color=\"primary\" onClick={startGame} size=\"large\">Start Game</GameButton>\r\n            )}\r\n\r\n            {(gameState === 'showing' || gameState === 'input') && (\r\n              <>\r\n                <LevelDisplay variant=\"h6\" gutterBottom>Level {level}</LevelDisplay>\r\n                {gameState === 'showing' ? (\r\n                  <>\r\n                    <LetterDisplay variant=\"h3\" gutterBottom>{sequence[sequence.length - 1]}</LetterDisplay>\r\n                    <LinearProgress variant=\"determinate\" value={progress} sx={{ width: '80%', margin: '20px auto', height: 10 }}/>\r\n                  </>\r\n                ) : (\r\n                  <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n                    <Grid item><Typography variant=\"h5\" gutterBottom>What was the sequence?</Typography></Grid>\r\n                    <Grid item>\r\n                      <TextField\r\n                        value={userInput}\r\n                        onChange={(e) => setUserInput(e.target.value)}\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Enter the sequence\"\r\n                        inputProps={{ style: { textAlign: 'center', fontSize: '24px' }, autoFocus: true }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item><GameButton variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</GameButton></Grid>\r\n                  </Grid>\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {gameState === 'over' && (\r\n              <>\r\n                <Typography variant=\"h4\" gutterBottom fontWeight=\"bold\" color=\"primary\">Test Over!</Typography>\r\n                <Typography variant=\"h5\">You successfully completed {level - 1} levels.</Typography>\r\n                <GameButton variant=\"contained\" color=\"primary\" onClick={startGame} sx={{ mt: 2 }}>Restart</GameButton>\r\n              </>\r\n            )}\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default SequenceMemory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}